import { CadastroSuperHeroiRequestDto } from '../dtos/cadastro.super.heroi.request.dto';
import { CadastroSuperHeroiResponseDto } from '../dtos/cadastro.super.heroi.response.dto';
import { Repository } from 'typeorm';
import { AlinhamentoEntity } from 'src/database/entities/postgres/alinhamento.entity';
import { AtributoEntity } from 'src/database/entities/postgres/atributo.entity';
import { CorEntity } from 'src/database/entities/postgres/cor.entity';
import { EditoraEntity } from 'src/database/entities/postgres/editora.entity';
import { GeneroEntity } from 'src/database/entities/postgres/genero.entity';
import { HeroiAtributoEntity } from 'src/database/entities/postgres/heroi.atributo.entity';
import { PoderEntity } from 'src/database/entities/postgres/poder.entity';
import { RacaEntity } from 'src/database/entities/postgres/raca.entity';
import { SuperHeroiEntity } from 'src/database/entities/postgres/super.heroi.entity';
import { LogService } from 'src/common/log/log.service';
import { ParametrosCadastroResponseDto } from '../dtos/parametros.cadastro.response.dto';
import { SuperHeroiResponseDto } from '../dtos/super.heroi.response.dto';
import { AtualizarSuperHeroiRequestDto } from '../dtos/atualizar.super.heroi.request.dto';
export declare class SuperheroiService {
    private readonly alinhamentoEntityRepository;
    private readonly atributoEntityRepository;
    private readonly corEntityRepository;
    private readonly editoraEntityRepository;
    private readonly generoEntityRepository;
    private readonly heroiAtributoEntityRepository;
    private readonly poderEntityRepository;
    private readonly racaEntityRepository;
    private readonly superHeroiEntityRepository;
    private readonly logService;
    constructor(alinhamentoEntityRepository: Repository<AlinhamentoEntity>, atributoEntityRepository: Repository<AtributoEntity>, corEntityRepository: Repository<CorEntity>, editoraEntityRepository: Repository<EditoraEntity>, generoEntityRepository: Repository<GeneroEntity>, heroiAtributoEntityRepository: Repository<HeroiAtributoEntity>, poderEntityRepository: Repository<PoderEntity>, racaEntityRepository: Repository<RacaEntity>, superHeroiEntityRepository: Repository<SuperHeroiEntity>, logService: LogService);
    cadastrarSuperHeroi(cadastroSuperHeroiRequestDto: CadastroSuperHeroiRequestDto): Promise<CadastroSuperHeroiResponseDto>;
    atualizarSuperHeroi(id: bigint, atualizarSuperHeroiRequestDto: AtualizarSuperHeroiRequestDto): Promise<void>;
    deletarSuperHeroi(id: bigint): Promise<void>;
    pegarParametrosCadastro(): Promise<ParametrosCadastroResponseDto>;
    listarTodosSuperHerois(): Promise<SuperHeroiResponseDto[]>;
    validarEntradaIdEntidades(generoEntity: GeneroEntity, corDoOlhoEntity: CorEntity, corDoCabeloEntity: CorEntity, corDaPeleEntity: CorEntity, racaEntity: RacaEntity, editoraEntity: EditoraEntity, alinhamentoEntity: AlinhamentoEntity): void;
    alimentarEntidadeSuperHeroi(superHeroiEntity: SuperHeroiEntity, generoEntity: GeneroEntity, corDoOlhoEntity: CorEntity, corDoCabeloEntity: CorEntity, corDaPeleEntity: CorEntity, racaEntity: RacaEntity, editoraEntity: EditoraEntity, alinhamentoEntity: AlinhamentoEntity, nomeCompleto: string, altura: number, peso: number, nomeSuperHeroi: string): void;
    alimentarCadastroSuperHeroiResponseDto(cadastroSuperHeroiResponseDto: CadastroSuperHeroiResponseDto, id: bigint, nomeSuperHeroi: string, nomeCompleto: string): void;
    alimentarSuperHeroiResponseDto(superHeroiResponseDto: SuperHeroiResponseDto, superHeroiEntity: SuperHeroiEntity): void;
    verificarHeroiJaExiste(generoEntity: GeneroEntity, corDoOlhoEntity: CorEntity, corDoCabeloEntity: CorEntity, corDaPeleEntity: CorEntity, racaEntity: RacaEntity, editoraEntity: EditoraEntity, alinhamentoEntity: AlinhamentoEntity, nomeCompleto: string, altura: number, peso: number, nomeSuperHeroi: string): Promise<boolean>;
    private alimentarSuperHeroiEntidade;
}
